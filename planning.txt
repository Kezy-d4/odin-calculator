calculator interface and functionality:
  structure:
    - case
    - display

  operands:
    - digits 0 through 9
    - decimal

  operators:
    - add
    - subtract
    - multiply
    - divide
    - equals

  functions:
    - clear
    - backspace

flow:
- User begins inputting their first operand.
  - User selects any operator.
    - Operand 1 is parsed and committed to expression.
    - Operand 1 can no longer be manipulated.
    - User may change their operator if desired at this point.

- User begins inputting their second operand.
  - Operator is committed to expression. 
  - Display and inputs are reset.
    - User selects any operator.
      - Operand 2 is parsed and committed to expression.
      - Result of expression: operand 1 (operator) operand 2 is evaluated and assigned.
      - If operation is division and either operand is 0, display an error modal and reset the calculator.
      - Value of result is assigned to operand 1 for future calculations.
      - Value of operand 2 is reset for future calculations.
      - Check if result contains any decimals, if so, round it to one decimal place.
      - If rounded result still exceeds 10 characters, display an error modal and reset the calculator.
      - Otherwise, display the result.

/*
To-Do:
  bugs and ways the user could break the calculator:
    - can input multiple decimals 
      solution: Check if operand already contains a decimal, if so, disable the decimal button until the operand is committed. 

    - can divide either operand by 0 or negative 0
      solution: Check if the operation being performed is division and if either one or both operands are 0 or negative 0. Display a snarky message instead of a result when the user attempts such operation.

    - can overflow display when inputting operand 
      solution: Limit operand input to 12 digits including decimal. 

    - can overflow display when result contains many decimal places
      solution: Round display results to 2 decimal places (keep the accurate number for internal calculations).

    - can overflow display when result contains many digits
      solution: Display a snarky message instead of a result when result exceeds 12 digits including decimal, then reset calculator. 

    - can overflow display with many irrelevant starting 0's 
      solution: Allow input of 0's only after a non-zero starting number. 

    - can select operator before operand
    - can perform equals before operand
*/

//
  Application flow for operations:
    - user selects any operator.
    - store operatorInput.

    - if operandInput1 has yet to be assigned,
      - store contents of display as is in operandInput1.
        - if display amounts to any form of zero, negative zero, or zero with many decimals, simply store it as 0.

      - disable backspace and sign change for the time being to prevent further manipulation of committed operand.

      - if operatorInput was equals,
        - result is operandInput1.
        - display result.
          - if result contains decimal places, round display to two decimal places.
      
    - if operandInput1 has been assigned,

      - if operandInput2 has yet to be assigned,
        - if operatorInput was equals,
          - result is operandInput1.
          - display result.
            - if result contains decimal places, round display to two decimal places.

        - if operatorInput was something besides equals,
          - if user begins entering next operand,
            - begin populating display with user selections.
            - reenable backspace and sign change for the time being.

            - user selects any operator.
            - store operatorInput.
              - store contents of display as is in operandInput2.
                - if display amounts to any form of zero, negative zero, or zero with many decimals, simply store it as 0.
              
              - if operatorInput is division and either operandInput is 0, display an error modal and reset the calculator.
              - result is operandInput1 (operatorInput) operandInput2.
              - display result.
                - if result contains decimal places, round display to two decimal places.
                - if rounded display exceeds 12 digits, display an error modal and reset the calculator.
              - store result in operandInput1 and reset operandInput2.

/*
const clear = document.querySelector('.clear');

function allClear() {
  output.textContent = '0';
}

clear.addEventListener('click', () => allClear());


function storeOperand() {
  operandInput1 = output.textContent;
  console.log('operandInput:', operandInput1);
}

storeOperand();

const output = document.querySelector('.output');
const operands = document.querySelectorAll('.operand');
const decimal = document.querySelector('.decimal');
const operators = document.querySelectorAll('.operator');

function populateDisplay(e) {
  output.textContent += e.target.textContent;
}

operands.forEach(operand => {
  operand.addEventListener('click', (e) => {

    if (output.textContent === '0' && e.target.textContent === '.') {
      output.textContent = '0';
      populateDisplay(e);

    } else if (output.textContent === '0' && e.target.textContent !== '.') {
      output.textContent = '';
      populateDisplay(e);

    } else if (e.target.textContent === '.' && output.textContent.includes('.')) {
      return;
      
    } else {
      populateDisplay(e);
    }
  });
});
*/

